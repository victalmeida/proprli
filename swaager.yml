openapi: 3.0.0
info:
  title: Proprli API
  description: This API is developed as part of the technical test for Proprli. It is built using Laravel 10 and serves to manage tasks within the system.
  version: 1.0.0
servers:
  - url: http://localhost:8989/api
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Task:
      type: object
      properties:
        id:
          type: integer
        task_name:
          type: string
        task_description:
          type: string
        assigned_team:
          type: integer
        assigned_building:
          type: integer
        assigned_user:
          type: integer
        task_status:
          type: integer
    TaskWithComment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        task_name:
          type: string
          example: "teste 3"
        task_description:
          type: string
          example: "Tesde de Description"
        assigned_user:
          type: integer
          example: 1
        assigned_building:
          type: integer
          example: 1
        assigned_team:
          type: integer
          example: 1
        task_status:
          type: integer
          example: 3
        created_at:
          type: string
          format: date-time
          example: "2024-08-20T17:03:45.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-08-20T17:06:05.000000Z"
        task_comment:
          type: array
          items:
            $ref: '#/components/schemas/TaskComment'

    TaskComment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        comment:
          type: string
          example: "Testando a Tarefa e finalizando alguns ajustes"
        user_id:
          type: integer
          example: 1
        task_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-08-20T17:04:31.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-08-20T17:04:31.000000Z"      
    Comment:
      type: object
      properties:
        task_id:
          type: integer
        comment:
          type: string
    Auth:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

security:
  - BearerAuth: []

paths:
  /user:
    get:
      summary: Retrieve authenticated user information
      operationId: getUserInfo
      tags:
        - User
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /auth:
    post:
      summary: Authenticate and obtain a token
      operationId: login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        '200':
          description: Token generated successfully
        '401':
          description: Invalid credentials
    put:
      summary: Refresh token
      operationId: refreshToken
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
        '401':
          description: Invalid credentials

  /auth/logout:
    post:
      summary: Logout and invalidate the token
      operationId: logout
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Unauthorized

  /task:
    post:
      summary: Create a new task
      operationId: createTask
      tags:
        - Task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task created successfully
    put:
      summary: Update an existing task
      operationId: updateTask
      tags:
        - Task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated successfully
    get:
      summary: List all tasks
      operationId: listTasks
      tags:
        - Task
      security:
        - BearerAuth: []
      parameters:
        - name: task_creation_start
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Start date for task creation filtering.
        - name: task_creation_end
          in: query
          required: false
          schema:
            type: string
            format: date
          description: End date for task creation filtering.
        - name: assigned_user
          in: query
          required: false
          schema:
            type: integer
          description: Filter tasks by assigned user ID.
        - name: task_status
          in: query
          required: false
          schema:
            type: integer
          description: Filter tasks by status ID.
      responses:
        '200':
          description: List of tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskWithComment'

  /task/comment:
    post:
      summary: Add a comment to a task
      operationId: addComment
      tags:
        - Task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment added successfully

  /audit:
    get:
      summary: Retrieve audit logs
      operationId: getAuditLogs
      tags:
        - Audit
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of audit logs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    action:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    user_id:
                      type: integer
